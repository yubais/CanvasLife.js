// Generated by CoffeeScript 1.6.1
var Canvas;

Canvas = (function() {

  function Canvas(jqo, defaultStyle) {
    this.jqo = jqo;
    this.width = this.jqo.width();
    this.height = this.jqo.height();
    this.jqo.attr("width", this.width);
    this.jqo.attr("height", this.height);
    this.offset();
    this["default"] = {};
    if (defaultStyle) {
      if (defaultStyle.strokeColor !== void 0) {
        this["default"].strokeColor = defaultStyle.strokeColor;
      }
      if (defaultStyle.fillColor !== void 0) {
        this["default"].fillColor = defaultStyle.fillColor;
      }
    }
  }

  Canvas.prototype.ctx = function() {
    return this.jqo[0].getContext("2d");
  };

  Canvas.prototype.offset = function() {
    var tmp;
    tmp = this.jqo.offset();
    this.left = tmp.left;
    this.top = tmp.top;
    this.right = tmp.left + this.width;
    return this.bottom = tmp.top + this.height;
  };

  Canvas.drawPath = function(ctx, type) {
    if (type === "s") {
      ctx.stroke();
    }
    if (type === "f") {
      ctx.fill();
    }
    if (type === "fs") {
      ctx.fill();
      return ctx.stroke();
    }
  };

  Canvas.prototype.polylinePath = function(ctx, points) {
    var p, _i, _len, _results;
    ctx.beginPath();
    if ((points != null) === false) {
      throw new Error("CanvasLife Error: missing of points");
      return false;
    }
    _results = [];
    for (_i = 0, _len = points.length; _i < _len; _i++) {
      p = points[_i];
      _results.push(ctx.lineTo(p[0], p[1]));
    }
    return _results;
  };

  Canvas.prototype.setCtxStyle = function(ctx, style) {
    if (style != null) {
      if (style.strokeWidth === void 0) {
        ctx.lineWidth = this["default"].strokeWidth;
      } else {
        ctx.lineWidth = style.strokeWidth;
      }
      if (style.strokeColor === void 0) {
        ctx.strokeStyle = this["default"].strokeColor;
      } else {
        ctx.strokeStyle = style.strokeColor;
      }
      if (style.fillColor === void 0) {
        return ctx.fillStyle = this["default"].fillColor;
      } else {
        return ctx.fillStyle = style.fillColor;
      }
    }
  };

  Canvas.prototype.line = function(args) {
    var ctx;
    ctx = this.ctx();
    this.setCtxStyle(ctx, args);
    this.polylinePath(ctx, args.points);
    return ctx.stroke();
  };

  Canvas.prototype.polygonal = function(args) {
    var ctx;
    ctx = this.ctx();
    this.setCtxStyle(ctx, args);
    this.polylinePath(ctx, args.points);
    ctx.closePath();
    return Canvas.drawPath(ctx, args.type);
  };

  Canvas.prototype.circle = function(args) {
    var ctx;
    ctx = this.ctx();
    this.setCtxStyle(ctx, args);
    ctx.beginPath();
    if (args.center[0] && args.center[1] && args.radius && args.type) {
      ctx.arc(args.center[0], args.center[1], args.radius, 0, Math.PI * 2);
      return Canvas.drawPath(ctx, args.type);
    } else {
      console.log(args);
      throw new Error("CanvasLife Error: Invalid Parameters");
    }
  };

  Canvas.prototype.allClear = function() {
    var ctx;
    ctx = this.ctx();
    return ctx.clearRect(0, 0, this.width, this.height);
  };

  return Canvas;

})();
